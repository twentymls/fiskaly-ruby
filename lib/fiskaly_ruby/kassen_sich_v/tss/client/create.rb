module FiskalyRuby
  module KassenSichV
    module TSS
      module Client
        # Management APIs {https://developer.fiskaly.com/api/kassensichv/v2/#operation/createClient create client request}
        #
        # Create a client
        #
        # This endpoint creates a new client and associates it with a TSS.
        # The state of a new client is automatically set to "REGISTERED". Only a client in a "REGISTERED" state can use the TSS.
        # Unique identifier of the ERS see {https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR03153/TR-03153.pdf?__blob=publicationFile 7.5. BSI TR-03153}
        class Create < Base
          # Client 'serial_number' payload field regexp
          SERIAL_NUMBER_REGEXP = %r{^[A-Za-z0-9 '()+,-./:=?]{0,100}$}.freeze

          attr_reader :tss_id, :client_id

          # Required payload attributes
          #
          # @return [Array] Set of required attributes
          def required_payload_attributes
            %i(serial_number)
          end

          # Optional payload attributes
          #
          # @return [Array] Set of optional attributes
          def optional_payload_attributes
            %i(metadata)
          end

          # @param token [String] JWT token
          # @param tss_id [String] TSS UUID
          # @param client_id [String] Client UUID
          # @param payload [Hash] Payload of request
          # @return [FiskalyRuby::KassenSichV::TSS::Client::Create] The Update object
          def initialize(token:, tss_id:, client_id: SecureRandom.uuid, payload: _payload)
            super(token: token, payload: payload)

            @tss_id = tss_id
            @client_id = client_id
          end

          # Execute client creation
          #
          # @return [Hash] Formatted response informations
          def call
            _validate_params

            response = self.class.put("/tss/#{tss_id}/client/#{client_id}", headers: headers, body: body)

            handle_response(response)
          end

          private

          # Default payload with autogenerated `serial_number`
          #
          # @return [Hash] The default payload
          def _payload
            { serial_number: SecureRandom.hex }
          end

          # Validate parameters
          #
          # @return NilClass
          def _validate_params
            _validate_serial_number
            _validate_metadata
          end

          # Validate serial_number parameter
          #
          # @return NilClass
          def _validate_serial_number
            serial_number = payload[:serial_number]

            raise "Invalid serial_number for: #{serial_number.inspect}, it must be matched by this regexp: #{SERIAL_NUMBER_REGEXP.inspect}" unless SERIAL_NUMBER_REGEXP.match?(serial_number)
          end
        end
      end
    end
  end
end
